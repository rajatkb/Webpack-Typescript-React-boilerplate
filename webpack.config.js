const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');


/*
 * SplitChunksPlugin is enabled by default and replaced
 * deprecated CommonsChunkPlugin. It automatically identifies modules which
 * should be splitted of chunk by heuristics using module duplication count and
 * module category (i. e. node_modules). And splits the chunksâ€¦
 *
 * It is safe to remove "splitChunks" from the generated configuration
 * and was added as an educational example.
 *
 * https://webpack.js.org/plugins/split-chunks-plugin/
 *
 */

/*
 * We've enabled TerserPlugin for you! This minifies your app
 * in order to load faster and run less javascript.
 *
 * https://github.com/webpack-contrib/terser-webpack-plugin
 *
 */

const TerserPlugin = require('terser-webpack-plugin');

const mode = process.env.NODE_ENV || "development"
const isDev = mode == "development"

/** @type {import('webpack').Configuration} */
module.exports = {
  mode: mode,
  entry: './src/index.tsx',
  devtool: 'cheap-source-map',
  plugins: [new webpack.ProgressPlugin() ,new HtmlWebpackPlugin({
    template: path.join(__dirname , 'src/index.html'),
  }) ],
  module: {
    rules: [
     {
      test: /.(scss|css)$/,

      use: [
      {
        loader: "style-loader"
      },
      {
        loader: "css-modules-typescript-loader",
        options:{
          banner: "// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!", 
        }
      }, 
      {
        loader: "css-loader",
        options: {
          sourceMap: isDev,
          modules: true ,
        }
      }, 
      {
        loader: "sass-loader",
        options: {
          sourceMap: isDev,
        }
      }]
    },{
      test: /\.(ts|tsx)$/,
      loader: 'ts-loader',
      include: [path.resolve(__dirname, 'src')],
      exclude: [/node_modules/]
    },]
  },

  resolve: {
    extensions: ['css' , 'scss','.tsx', '.ts', '.js' ]
  },

  optimization: {
    minimizer: [new TerserPlugin()],

    splitChunks: {
      cacheGroups: {
        vendors: {
          priority: -10,
          test: /[/\\]node_modules[/\\]/
        }
      },

      chunks: 'async',
      minChunks: 1,
      minSize: 30000,
      name: false
    }
  },

  output: {
    filename: '[name].[contenthash].js',
    path: path.join(__dirname , 'build'),
    publicPath: '/',
  },

  devServer:{
    historyApiFallback: true,
    contentBase: path.resolve(__dirname, './build'),
    open: true,
    compress: true,
    hot: true,
    port: 8080,   
  }
}